#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Generate .stp file that outputs simpletrace binary traces (DTrace with SystemTAP only).
"""

__author__     = "Stefan Hajnoczi <redhat.com>"
__copyright__  = "Copyright (C) 2014, Red Hat, Inc."
__license__    = "GPL version 2 or (at your option) any later version"

__maintainer__ = "Stefan Hajnoczi"
__email__      = "stefanha@redhat.com"


from tracetool import out
from tracetool.backend.dtrace import binary, probeprefix
from tracetool.backend.simple import is_string
from tracetool.format.stap import stap_escape


def generate(events, backend):
    out('/* This file is autogenerated by tracetool, do not edit. */',
        '')

    for event_id, e in enumerate(events):
        if 'disable' in e.properties:
            continue

        out('probe %(probeprefix)s.%(name)s ?',
            '{',
            probeprefix=probeprefix(),
            name=e.name)

        # Calculate record size
        sizes = ['24'] # sizeof(TraceRecord)
        for type_, name in e.args:
            name = stap_escape(name)
            if is_string(type_):
                out('    arg%(name)s_str = %(name)s ? user_string_n(%(name)s, 512) : ""',
                    '    arg%(name)s_len = strlen(arg%(name)s_str)',
                    name=name)
                sizes.append('4 + arg%s_len' % name)
            else:
                sizes.append('8')
        sizestr = ' + '.join(sizes)

        # Output record header
        out('    printf("%%8b%%8b%%4b%%4b",',
            '           %(event_id)s,',
            '           gettimeofday_ns(),',
            '           %(sizestr)s,',
            '           pid())',
            event_id=event_id,
            sizestr=sizestr)

        # Output fields
        for type_, name in e.args:
            name = stap_escape(name)
            if is_string(type_):
                out('    printf("%%4b%%.*s", arg%(name)s_len, arg%(name)s_len, arg%(name)s_str)',
                    name=name)
            else:
                out('    printf("%%8b", %(name)s)',
                    name=name)

        out('}')

    out()
